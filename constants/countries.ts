export interface Country {
  code: string;
  name: string;
  flag: string;
  dialCode: string;
  format?: string;
  mask?: string;
}

export const countries: Country[] = [
  { code: 'US', name: 'United States', flag: 'ðŸ‡ºðŸ‡¸', dialCode: '+1', format: '(###) ###-####' },
  { code: 'CA', name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦', dialCode: '+1', format: '(###) ###-####' },
  { code: 'GB', name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§', dialCode: '+44', format: '#### ### ####' },
  { code: 'FR', name: 'France', flag: 'ðŸ‡«ðŸ‡·', dialCode: '+33', format: '## ## ## ## ##' },
  { code: 'DE', name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª', dialCode: '+49', format: '### ########' },
  { code: 'ES', name: 'Spain', flag: 'ðŸ‡ªðŸ‡¸', dialCode: '+34', format: '### ### ###' },
  { code: 'IT', name: 'Italy', flag: 'ðŸ‡®ðŸ‡¹', dialCode: '+39', format: '### ### ####' },
  { code: 'AU', name: 'Australia', flag: 'ðŸ‡¦ðŸ‡º', dialCode: '+61', format: '### ### ###' },
  { code: 'NZ', name: 'New Zealand', flag: 'ðŸ‡³ðŸ‡¿', dialCode: '+64', format: '## ### ####' },
  { code: 'JP', name: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ', dialCode: '+81', format: '##-####-####' },
  { code: 'KR', name: 'South Korea', flag: 'ðŸ‡°ðŸ‡·', dialCode: '+82', format: '##-####-####' },
  { code: 'CN', name: 'China', flag: 'ðŸ‡¨ðŸ‡³', dialCode: '+86', format: '### #### ####' },
  { code: 'IN', name: 'India', flag: 'ðŸ‡®ðŸ‡³', dialCode: '+91', format: '##### #####' },
  { code: 'BR', name: 'Brazil', flag: 'ðŸ‡§ðŸ‡·', dialCode: '+55', format: '(##) #####-####' },
  { code: 'MX', name: 'Mexico', flag: 'ðŸ‡²ðŸ‡½', dialCode: '+52', format: '### ### ####' },
  { code: 'AR', name: 'Argentina', flag: 'ðŸ‡¦ðŸ‡·', dialCode: '+54', format: '### ####-####' },
  { code: 'RU', name: 'Russia', flag: 'ðŸ‡·ðŸ‡º', dialCode: '+7', format: '### ###-##-##' },
  { code: 'TR', name: 'Turkey', flag: 'ðŸ‡¹ðŸ‡·', dialCode: '+90', format: '### ### ## ##' },
  { code: 'ZA', name: 'South Africa', flag: 'ðŸ‡¿ðŸ‡¦', dialCode: '+27', format: '## ### ####' },
  { code: 'EG', name: 'Egypt', flag: 'ðŸ‡ªðŸ‡¬', dialCode: '+20', format: '### ### ####' },
  { code: 'NG', name: 'Nigeria', flag: 'ðŸ‡³ðŸ‡¬', dialCode: '+234', format: '### ### ####' },
  { code: 'KE', name: 'Kenya', flag: 'ðŸ‡°ðŸ‡ª', dialCode: '+254', format: '### ######' },
  { code: 'TH', name: 'Thailand', flag: 'ðŸ‡¹ðŸ‡­', dialCode: '+66', format: '##-####-####' },
  { code: 'MY', name: 'Malaysia', flag: 'ðŸ‡²ðŸ‡¾', dialCode: '+60', format: '##-#### ####' },
  { code: 'SG', name: 'Singapore', flag: 'ðŸ‡¸ðŸ‡¬', dialCode: '+65', format: '#### ####' },
  { code: 'PH', name: 'Philippines', flag: 'ðŸ‡µðŸ‡­', dialCode: '+63', format: '### ### ####' },
  { code: 'ID', name: 'Indonesia', flag: 'ðŸ‡®ðŸ‡©', dialCode: '+62', format: '###-###-####' },
  { code: 'VN', name: 'Vietnam', flag: 'ðŸ‡»ðŸ‡³', dialCode: '+84', format: '### ### ####' },
  { code: 'AE', name: 'UAE', flag: 'ðŸ‡¦ðŸ‡ª', dialCode: '+971', format: '## ### ####' },
  { code: 'SA', name: 'Saudi Arabia', flag: 'ðŸ‡¸ðŸ‡¦', dialCode: '+966', format: '## ### ####' },
  { code: 'IL', name: 'Israel', flag: 'ðŸ‡®ðŸ‡±', dialCode: '+972', format: '##-###-####' },
  { code: 'GR', name: 'Greece', flag: 'ðŸ‡¬ðŸ‡·', dialCode: '+30', format: '### ### ####' },
  { code: 'PT', name: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', dialCode: '+351', format: '### ### ###' },
  { code: 'NL', name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±', dialCode: '+31', format: '##-########' },
  { code: 'BE', name: 'Belgium', flag: 'ðŸ‡§ðŸ‡ª', dialCode: '+32', format: '### ## ## ##' },
  { code: 'CH', name: 'Switzerland', flag: 'ðŸ‡¨ðŸ‡­', dialCode: '+41', format: '## ### ## ##' },
  { code: 'AT', name: 'Austria', flag: 'ðŸ‡¦ðŸ‡¹', dialCode: '+43', format: '### ######' },
  { code: 'SE', name: 'Sweden', flag: 'ðŸ‡¸ðŸ‡ª', dialCode: '+46', format: '##-### ## ##' },
  { code: 'NO', name: 'Norway', flag: 'ðŸ‡³ðŸ‡´', dialCode: '+47', format: '### ## ###' },
  { code: 'DK', name: 'Denmark', flag: 'ðŸ‡©ðŸ‡°', dialCode: '+45', format: '## ## ## ##' },
  { code: 'FI', name: 'Finland', flag: 'ðŸ‡«ðŸ‡®', dialCode: '+358', format: '### #######' },
  { code: 'IE', name: 'Ireland', flag: 'ðŸ‡®ðŸ‡ª', dialCode: '+353', format: '## ### ####' },
  { code: 'PL', name: 'Poland', flag: 'ðŸ‡µðŸ‡±', dialCode: '+48', format: '### ### ###' },
  { code: 'CZ', name: 'Czech Republic', flag: 'ðŸ‡¨ðŸ‡¿', dialCode: '+420', format: '### ### ###' },
  { code: 'HU', name: 'Hungary', flag: 'ðŸ‡­ðŸ‡º', dialCode: '+36', format: '## ### ####' },
  { code: 'RO', name: 'Romania', flag: 'ðŸ‡·ðŸ‡´', dialCode: '+40', format: '### ### ###' },
  { code: 'HR', name: 'Croatia', flag: 'ðŸ‡­ðŸ‡·', dialCode: '+385', format: '##-###-####' },
  { code: 'BG', name: 'Bulgaria', flag: 'ðŸ‡§ðŸ‡¬', dialCode: '+359', format: '### ### ###' },
  { code: 'LT', name: 'Lithuania', flag: 'ðŸ‡±ðŸ‡¹', dialCode: '+370', format: '### #####' },
  { code: 'LV', name: 'Latvia', flag: 'ðŸ‡±ðŸ‡»', dialCode: '+371', format: '## ### ###' },
  { code: 'EE', name: 'Estonia', flag: 'ðŸ‡ªðŸ‡ª', dialCode: '+372', format: '### ####' },
  { code: 'IS', name: 'Iceland', flag: 'ðŸ‡®ðŸ‡¸', dialCode: '+354', format: '### ####' }
];

export const getCountryByCode = (code: string): Country | undefined => {
  return countries.find(country => country.code === code);
};

export const getCountryByDialCode = (dialCode: string): Country | undefined => {
  return countries.find(country => country.dialCode === dialCode);
};

export const detectCountryFromPhone = (phone: string): Country | undefined => {
  // Remove all non-digit characters except +
  const cleaned = phone.replace(/[^\d+]/g, '');
  
  if (!cleaned.startsWith('+')) return undefined;
  
  // Try to match dial codes (longest first for accuracy)
  const sortedCountries = countries.sort((a, b) => b.dialCode.length - a.dialCode.length);
  
  for (const country of sortedCountries) {
    if (cleaned.startsWith(country.dialCode)) {
      return country;
    }
  }
  
  return undefined;
};

export const formatPhoneWithCountry = (phone: string, country: Country): string => {
  const cleaned = phone.replace(/\D/g, '');
  const dialCode = country.dialCode.replace('+', '');
  
  // Remove country code if present
  let nationalNumber = cleaned;
  if (cleaned.startsWith(dialCode)) {
    nationalNumber = cleaned.substring(dialCode.length);
  }
  
  // Apply country-specific formatting
  if (country.format) {
    let formatted = country.format;
    let index = 0;
    
    for (let i = 0; i < formatted.length; i++) {
      if (formatted[i] === '#' && index < nationalNumber.length) {
        formatted = formatted.substring(0, i) + nationalNumber[index] + formatted.substring(i + 1);
        index++;
      }
    }
    
    // Remove unused # symbols
    formatted = formatted.replace(/#/g, '');
    
    // Only return if we used some digits
    if (index > 0) {
      return `${country.dialCode} ${formatted}`.trim();
    }
  }
  
  // Fallback formatting
  if (nationalNumber.length > 0) {
    return `${country.dialCode} ${nationalNumber}`;
  }
  
  return country.dialCode;
};
